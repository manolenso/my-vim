*gulp-vim.txt*   gulp-vim - A plugin running gulp in vim
*gulp-vim*


	      ____ _   _ _     ____   __     _____ __  __                    ~
	     / ___| | | | |   |  _ \  \ \   / /_ _|  \/  |                   ~
	    | |  _| | | | |   | |_) |  \ \ / / | || |\/| |                   ~
	    | |_| | |_| | |___|  __/    \ V /  | || |  | |                   ~
	     \____|\___/|_____|_|        \_/  |___|_|  |_|                   ~
                                              

                                                 
                                            
                              Reference Manual~


==============================================================================
CONTENTS                                                  *gulp-vim.content*

    1.usage........................................|gulp-vim-usage|
    2.Commands.....................................|gulp-vim-commands|
    3.Mappings.....................................|gulp-vim-Mapping|
    4.License......................................|gulp-vim-license|
    5.Credit.......................................|gulp-vim-Credit|


==============================================================================
1. Intro                                                     *gulp-vim-intro*

gulp-vim is a syntax checking plugin that runs files through external syntax
checkers. This can be done on demand, or automatically as files are saved and
opened.  If syntax errors are detected, the user is notified and is happy
because they didn't have to compile their code or execute their script to find
them.

gulp-vim comes in two parts: the syntax checker plugins, and the core. The
syntax checker plugins are defined on a per-filetype basis where each one wraps
up an external syntax checking program. The core script delegates off to these
plugins and uses their output to provide the gulp-vim functionality.

Take a look at the wiki for a list of supported filetypes and checkers:

    https://github.com/scrooloose/gulp-vim/wiki/Syntax-Checkers

Note: This doc only deals with using gulp-vim. To learn how to write syntax
checker integrations, see the guide on the github wiki:

    https://github.com/scrooloose/gulp-vim/wiki/Syntax-Checker-Guide

------------------------------------------------------------------------------
1.1. Quick start                                        *gulp-vim-quickstart*

gulp-vim comes preconfigured with a default list of enabled checkers per
filetype. This list is kept reasonably short to prevent slowing down Vim or
trying to use conflicting checkers.

You can see the list checkers available for the current filetype with the
|:gulp-vimInfo| command.

If you want to override the configured list of checkers for a filetype then
see |gulp-vim-checker-options| for details. You can also change the arguments
passed to a specific checker as well.

Use |:gulp-vimCheck| to manually check right now. Use |:gulp-vimToggleMode|
to switch between active (checking on writting the buffer) and passive (manual)
checking.

==============================================================================
2. Functionality provided                            *gulp-vim-functionality*

Syntax checking can be done automatically or on demand (see
|'gulp-vim_mode_map'| and |:gulp-vimToggleMode| for configuring this).

When syntax checking is done, the features below can be used to notify the
user of errors. See |gulp-vim-options| for how to configure and
activate/deactivate these features.

    * A statusline flag
    * Signs beside lines with errors
    * The |location-list| can be populated with the errors for the associated
      buffer
    * Erroneous parts of lines can be highlighted (this functionality is only
      provided by some syntax checkers)
    * Balloons (if the |+balloon_eval| feature is compiled in) can be used to
      display error messages for erroneous lines when hovering the mouse over
      them
    * Error messages from multiple checkers can be aggregated in a single list

------------------------------------------------------------------------------
2.1. The statusline flag                           *gulp-vim-statusline-flag*

To use the statusline flag, this must appear in your |'statusline'| setting >
    %{gulp-vimStatuslineFlag()}
<
Something like this could be more useful: >
    set statusline+=%#warningmsg#
    set statusline+=%{gulp-vimStatuslineFlag()}
    set statusline+=%*
<
When syntax errors are detected a flag will be shown. The content of the flag
is derived from the |gulp-vim_stl_format| option.

------------------------------------------------------------------------------
2.2. Error signs                                       *gulp-vim-error-signs*

gulp-vim uses the |:sign| commands to mark lines with errors and warnings in
the sign column. To enable this feature, use the |'gulp-vim_enable_signs'|
option.

Signs are colored using the Error and Todo syntax highlight groups by default.
If you wish to customize the colors for the signs, you can use the following
groups:
    gulp-vimErrorSign - For syntax errors, links to 'error' by default
    gulp-vimWarningSign - For syntax warnings, links to 'todo' by default
    gulp-vimStyleErrorSign - For style errors, links to 'gulp-vimErrorSign'
                              by default
    gulp-vimStyleWarningSign - For style warnings, links to
                                'gulp-vimWarningSign' by default

Example: >
    highlight gulp-vimErrorSign guifg=white guibg=red
<
To set up highlighting for the line where a sign resides, you can use the
following highlight groups:
    gulp-vimErrorLine
    gulp-vimWarningLine
    gulp-vimStyleErrorLine - Links to 'gulp-vimErrorLine' by default
    gulp-vimStyleWarningLine - Links to 'gulp-vimWarningLine' by default

Example: >
    highlight gulp-vimErrorLine guibg=#2f0000
<
------------------------------------------------------------------------------
2.3. The error window                         *:Errors* *gulp-vim-error-window*

You can use the :Errors command to display the errors for the current buffer
in the |location-list|.

Note that when you use :Errors, the current location list is overwritten with
gulp-vim's own location list.

------------------------------------------------------------------------------
2.4. Error highlighting                               *gulp-vim-highlighting*

Some checkers provide enough information for gulp-vim to be able to highlight
errors. By default the SpellBad syntax highlight group is used to color errors,
and the SpellCap group is used for warnings. If you wish to customize the
colors for highlighting you can use the following groups:
    gulp-vimError - Links to 'SpellBad' by default
    gulp-vimWarning - Links to 'SpellCap' by default

Example: >
    highlight gulp-vimError guibg=#2f0000
<
------------------------------------------------------------------------------
2.5. Aggregating errors                         *gulp-vim-aggregating-errors*

By default, namely if |'gulp-vim_aggregate_errors'| is unset, gulp-vim runs
in turn the checkers corresponding to the filetype of the current file (see
|gulp-vim-filetype-checkers|), and stops as soon as a checker reports any
errors. It then notifies you of the errors using the notification mechanisms
above. In this mode error lists are always produced by a single checker, and,
if you open the error window, the name of the checker that generated the errors
is shown on the statusline of the error window.

If |'gulp-vim_aggregate_errors'| is set, gulp-vim runs all checkers that
apply (still cf. |gulp-vim-filetype-checkers|), then aggregates errors found
by all checkers in a single list, and notifies you. In this mode each error
message is labeled with the name of the checker that generated it, but you can
disable generation of these labels by turning off '|gulp-vim_id_checkers|'.

------------------------------------------------------------------------------
2.6 Filtering errors                              *gulp-vim-filtering-errors*

You can selectively disable some of the errors found by checkers either
using |'gulp-vim_quiet_messages'|, or by specifying a list of patterns in
|'gulp-vim_ignore_files'|.

See also: |'gulp-vim_<filetype>_<checker>_quiet_messages'|.

==============================================================================
3. Commands                                               *gulp-vim-commands*

:Errors                                                     *:gulp-vimErrors*

When errors have been detected, use this command to pop up the |location-list|
and display the error messages.

:gulp-vimToggleMode                                    *:gulp-vimToggleMode*

Toggles gulp-vim between active and passive mode. See |'gulp-vim_mode_map'|
for more info.

:gulp-vimCheck                                              *:gulp-vimCheck*

Manually cause a syntax check to be done.  By default the checkers in the
|'g:gulp-vim_<filetype>_checkers'| or |'b:gulp-vim_checkers'| lists are run,
cf. |gulp-vim-filetype-checkers|.  If |gulp-vim_aggregate_errors| is unset
(which is the default), checking stops the first time a checker reports any
errors; if |gulp-vim_aggregate_errors| is set, all checkers that apply are run
in turn, and all errors found are aggregated in a single list.

The command may be followed by a (space separated) list of checkers.  In this
case |'g:gulp-vim_<filetype>_checkers'| and |'b:gulp-vim_checkers'| are
ignored, and the checkers named by the command's arguments are run instead, in
the order specified.  The rules of |gulp-vim_aggregate_errors| still apply.

Example: >
    :gulp-vimCheck flake8 pylint
<
:gulp-vimInfo                                               *:gulp-vimInfo*

The command takes an optional argument, and outputs information about the
checkers available for the filetype named by said argument, or for the current
filetype if no argument was provided.

:gulp-vimReset                                              *:gulp-vimReset*

Resets the list of errors and turns off all error notifiers.

:gulp-vimSetLoclist                                    *:gulp-vimSetLoclist*

If |'gulp-vim_always_populate_loc_list'| is not set, the |location-list| is
not filled in automatically with the list of errors detected by the checkers.
This is useful if you run gulp-vim along with other plugins that use location
lists.  The |:gulp-vimSetLoclist| command allows you to stick the errors into
the location list explicitly.

==============================================================================
4. Global Options                                   *gulp-vim-global-options*


                                                   *'gulp-vim_check_on_open'*
Default: 0
If enabled, gulp-vim will do syntax checks when buffers are first loaded as
well as on saving >
    let g:gulp-vim_check_on_open = 1
<
                                                     *'gulp-vim_check_on_wq'*
Default: 1
Normally gulp-vim runs syntax checks whenever buffers are written to disk.
If you want to skip these checks when you issue |:wq|, |:x|, and |:ZZ|, set this
variable to 0. >
    let g:gulp-vim_check_on_wq = 0
<
                                                *'gulp-vim_aggregate_errors'*
Default: 0
When enabled, gulp-vim runs all checkers that apply to the current filetype,
then aggregates errors found by all checkers and displays them. When disabled,
gulp-vim runs each checker in turn, and stops to display the results the first
time a checker finds any errors. >
    let g:gulp-vim_aggregate_errors = 1
<
                                                     *'gulp-vim_id_checkers'*
Default: 1
When results from multiple checkers are aggregated in a single error list
(that is either when |gulp-vim_aggregate_errors| is enabled, or when checking
a file with a composite filetype), it might not be immediately obvious which
checker has produced a given error message. This variable instructs gulp-vim
to label error messages with the names of the checkers that created them. >
    let g:gulp-vim_id_checkers = 0
<
                                              *'gulp-vim_echo_current_error'*
Default: 1
If enabled, gulp-vim will echo the error associated with the current line to
the command window. If multiple errors are found, the first will be used. >
    let g:gulp-vim_echo_current_error = 1
<
                                                    *'gulp-vim_enable_signs'*
Default: 1
Use this option to tell gulp-vim whether to use the |:sign| interface to mark
syntax errors: >
    let g:gulp-vim_enable_signs = 1
<
                     *'gulp-vim_error_symbol'* *'gulp-vim_style_error_symbol'*
                 *'gulp-vim_warning_symbol'* *'gulp-vim_style_warning_symbol'*
Use this option to control what the gulp-vim |:sign| text contains. Several
error symbols can be customized:
    gulp-vim_error_symbol - For syntax errors, defaults to '>>'
    gulp-vim_style_error_symbol - For style errors, defaults to 'S>'
    gulp-vim_warning_symbol - For syntax warnings, defaults to '>>'
    gulp-vim_style_warning_symbol - For style warnings, defaults to 'S>'

Example: >
    let g:gulp-vim_error_symbol = '✗'
    let g:gulp-vim_warning_symbol = '⚠'
<
                                                 *'gulp-vim_enable_balloons'*
Default: 1
Use this option to tell gulp-vim whether to display error messages in balloons
when the mouse is hovered over erroneous lines: >
    let g:gulp-vim_enable_balloons = 1
<
Note that Vim must be compiled with |+balloon_eval|.

                                             *'gulp-vim_enable_highlighting'*
Default: 1
Use this option to tell gulp-vim whether to use syntax highlighting to mark
errors (where possible). Highlighting can be turned off with the following >
    let g:gulp-vim_enable_highlighting = 0
<
                                        *'gulp-vim_always_populate_loc_list'*
Default: 0
Enable this option to tell gulp-vim to always stick any detected errors into
the |location-list|: >
    let g:gulp-vim_always_populate_loc_list = 1
<
                                                       *'gulp-vim_auto_jump'*
Default: 0
Enable this option if you want the cursor to jump to the first detected issue
when saving or opening a file.

When set to 0 the cursor won't jump automatically. >
    let g:gulp-vim_auto_jump = 0
<
When set to 1 the cursor will always jump to the first issue detected. >
    let g:gulp-vim_auto_jump = 1
<
When set to 2 the cursor will jump to the first issue detected, but only if
this issue is an error. >
    let g:gulp-vim_auto_jump = 2
<
                                                   *'gulp-vim_auto_loc_list'*
Default: 2
Use this option to tell gulp-vim to automatically open and/or close the
|location-list| (see |gulp-vim-error-window|).

When set to 0 the error window will not be opened or closed automatically. >
    let g:gulp-vim_auto_loc_list = 0
<
When set to 1 the error window will be automatically opened when errors are
detected, and closed when none are detected. >
    let g:gulp-vim_auto_loc_list = 1
<
When set to 2 the error window will be automatically closed when no errors are
detected, but not opened automatically. >
    let g:gulp-vim_auto_loc_list = 2
<
                                                 *'gulp-vim_loc_list_height'*
Default: 10
Use this option to specify the height of the location lists that gulp-vim
opens. >
    let g:gulp-vim_loc_list_height = 5
<
                                                    *'gulp-vim_ignore_files'*
Default: []
Use this option to specify files that gulp-vim should never check.  It's a
list of |regular-expression| patterns.  The full paths of files (see |::p|) are
matched against these patterns, and the matches are case sensitive. Use |\c|
to specify case insensitive patterns.  Example: >
    let g:gulp-vim_ignore_files = ['\m^/usr/include/', '\m\c\.h$']
<
                                                    *'gulp-vim_filetype_map'*
Default: {}
Use this option to map non-standard filetypes to standard ones.  Corresponding
checkers are mapped accordingly, which allows gulp-vim to check files with
non-standard filetypes: >
    let g:gulp-vim_filetype_map = { 'latex': 'tex',
                                   \ 'gentoo-metadata': 'xml' }
<
Composite filetypes can also be mapped to simple types, which disables the
default behaviour of running both checkers against the input file: >
    let g:gulp-vim_filetype_map = { 'handlebars.html': 'handlebars' }
<
                                                        *'gulp-vim_mode_map'*
Default: { "mode": "active",
           "active_filetypes": [],
           "passive_filetypes": [] }

Use this option to fine tune when automatic syntax checking is done (or not
done).

The option should be set to something like: >

    let g:gulp-vim_mode_map = { 'mode': 'active',
                               \ 'active_filetypes': ['ruby', 'php'],
                               \ 'passive_filetypes': ['puppet'] }
<
"mode" can be mapped to one of two values - "active" or "passive". When set to
active, gulp-vim does automatic checking whenever a buffer is saved or
initially opened.  When set to "passive" gulp-vim only checks when the user
calls |:gulp-vimCheck|.

The exceptions to these rules are defined with "active_filetypes" and
"passive_filetypes". In passive mode, automatic checks are still done
for all filetypes in the "active_filetypes" array. In active mode,
automatic checks are not done for any filetypes in the
"passive_filetypes" array.

At runtime, the |:gulp-vimToggleMode| command can be used to switch between
active and passive mode.

If any of "mode", "active_filetypes", or "passive_filetypes" are not specified
then they will default to their default value as above.

                                                  *'gulp-vim_quiet_messages'*
Default: {}

Use this option to filter out some of the messages produced by checkers.  The
option should be set to something like: >
    let g:gulp-vim_quiet_messages = { "level": "warnings",
                                     \ "type":  "style",
                                     \ "regex": '\m\[C03\d\d\]',
                                     \ "file":  ['\m^/usr/include/', '\m\c\.h$'] }
<
Each element turns off messages matching the patterns specified by the
corresponding value. Values are lists, but if a list consist of a single
element you can omit adding the brackets (e.g. you can write "style" instead
of ["style"]). Elements with values [] or '' are ignored (this is useful for
overriding filters, cf. |filter-overrides|).

    "level" - takes one of two values, "warnings" or "errors"
    "type"  - can be either "syntax" or "style"
    "regex" - is matched against the messages' text as a case insensitive
              |regular-expression|
    "file"  - is matched against the filename the error refers to, as a case
              sensitive |regular-expression|.

If |'gulp-vim_id_checkers'| is set, filters are applied before error messages
are labeled with the names of the checkers that created them.

There are also checker-specific variants of this option, providing finer
control. They are named |'gulp-vim_<filetype>_<checker>_quiet_messages'|.

For a particular checker, if both a |'gulp-vim_quiet_messages'| filter and
a checker-specific filter are present, they are both applied (to the list of
errors produced by the said checker). In case of conflicting values for the
same keys, the values of the checker-specific filters take precedence.

                                                            *filter-overrides*
Since filter elements with values [] or '' are ignored, you can disable global
filters for particular checkers, by setting the values of the corresponding
elements in |'gulp-vim_<filetype>_<checker>_quiet_messages'| to [] or ''. For
example, the following setting will silence all warnings, except for the
ones produced by 'pylint': >
    let g:gulp-vim_quiet_messages = { "level": "warnings" }
    let g:gulp-vim_python_pylint_quiet_messages = { "level" : [] }
<
                                                      *'gulp-vim_stl_format'*
Default: [Syntax: line:%F (%t)]
Use this option to control what the gulp-vim statusline text contains. Several
magic flags are available to insert information:
    %e - number of errors
    %w - number of warnings
    %t - total number of warnings and errors
    %fe - line number of first error
    %fw - line number of first warning
    %F - line number of first warning or error

Several additional flags are available to hide text under certain conditions:
    %E{...} - hide the text in the brackets unless there are errors
    %W{...} - hide the text in the brackets unless there are warnings
    %B{...} - hide the text in the brackets unless there are both warnings AND
              errors
These flags can't be nested.

Example: >
    let g:gulp-vim_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
<
If this format is used and the current buffer has 5 errors and 1 warning
starting on lines 20 and 10 respectively then this would appear on the
statusline: >
    [Err: 20 #5, Warn: 10 #1]
<
If the buffer had 2 warnings, starting on line 5 then this would appear: >
    [Warn: 5 #2]
<
                                                    *'gulp-vim_full_redraws'*
Default: 0 in GUI Vim and MacVim, 1 otherwise
Controls whether gulp-vim calls |:redraw| or |:redraw!| for screen redraws.
Changing it can in principle make screen redraws smoother, but it can also
cause screen to flicker, or cause ghost characters. Leaving it to the default
should be safe.

                                                           *'gulp-vim_debug'*
Default: 0
Set this to the sum of one or more of the following flags to enable
debugging:

     1 - trace checker calls
     2 - dump location lists
     4 - trace notifiers
     8 - trace autocommands
    16 - dump options

Example: >
    let g:gulp-vim_debug = 1
<
gulp-vim will then add debugging messages to Vim's |message-history|. You can
examine these messages with |:mes|.

                                                      *'gulp-vim_debug_file'*
Default: unset
When set, debugging messages are written to the file named by its value, in
addition to being added to Vim's |message-history|: >
    let g:gulp-vim_debug_file = '~/gulp-vim.log'
<
                                                 *'gulp-vim_extra_filetypes'*
Default: []
List of filetypes handled by checkers external to gulp-vim.  If you have a Vim
plugin that adds a checker for gulp-vim, and if the said checker deals with a
filetype that is unknown to gulp-vim, you might consider adding that filetype
to this list: >
    let g:gulp-vim_extra_filetypes = [ 'make', 'gitcommit' ]
<
This will allow |:gulp-vimInfo| to do proper tab completion for the new
filetypes.

==============================================================================
5. Checker Options                                 *gulp-vim-checker-options*

------------------------------------------------------------------------------
5.1 Choosing which checkers to use               *gulp-vim-filetype-checkers*

                                           *'g:gulp-vim_<filetype>_checkers'*
You can tell gulp-vim which checkers to run for a given filetype by setting a
variable 'g:gulp-vim_<filetype>_checkers' to a list of checkers, e.g. >
    let g:gulp-vim_php_checkers = ['php', 'phpcs', 'phpmd']
<
                                                      *'b:gulp-vim_checkers'*
There is also a per-buffer version of this setting, 'b:gulp-vim_checkers'.
When set, it takes precedence over |'g:gulp-vim_<filetype>_checkers'|.  You can
use this in an autocmd to configure specific checkers for particular paths: >
    autocmd FileType python if stridx(expand('%:p'), '/some/path/') == 0 |
        \ let b:gulp-vim_checkers = ['pylint'] | endif
<
If neither |'g:gulp-vim_<filetype>_checkers'| nor |'b:gulp-vim_checkers'|
is set, a default list of checker is used. Beware however that this list
deliberately kept minimal, for performance reasons.

Take a look at the wiki to find out what checkers and filetypes are supported
by gulp-vim:

    https://github.com/scrooloose/gulp-vim/wiki/Syntax-Checkers

Use |:gulp-vimInfo| to see which checkers are available for a given filetype.

------------------------------------------------------------------------------
5.2 Choosing the executable                            *gulp-vim-config-exec*

                                    *'gulp-vim_<filetype>_<subchecker>_exec'*
The executable used by a checker is normally defined automatically, when the
checkers is registered. You can however override it by setting the variable
'g:gulp-vim_<filetype>_<subchecker>_exec': >
    let g:gulp-vim_ruby_mri_exec = '~/bin/ruby2'
<
------------------------------------------------------------------------------
5.3 Configuring specific checkers                   *gulp-vim-config-makeprg*

Most checkers use the 'makeprgBuild()' function and provide many options by
default - in fact you can customise every part of the command that gets called.

                                *'gulp-vim_<filetype>_<subchecker>_<option>'*
Checkers that use 'makeprgBuild()' construct a 'makeprg' like this: >
    let makeprg = self.makeprgBuild({
                \ 'exe': self.getExec(),
                \ 'args': '-a -b -c',
                \ 'post_args': '--more --args',
                \ 'tail': '> /tmp/output' })
<
The result is a 'makeprg' of the form: >
    <exe> <args> <filename> <post_args> <tail>
<
                                     *'gulp-vim_<filetype>_<subchecker>_exe'*
All arguments above are optional, and can be overridden by setting global
variables 'g:gulp-vim_<filetype>_<checker-name>_<option-name>' - even
parameters not specified in the call to makeprgBuild(). These variables also
have local versions 'b:gulp-vim_<filetype>_<checker-name>_<option-name>',
which take precedence over the global ones in the corresponding buffers.

The 'exe' is normally the same as the 'exec' attribute described above, in
which case it may be omitted. However, you can use it to add environment
variables or additional parameters, e.g. to tell the mri checker to use KANJI
encoding you could do something like this: >
    let g:gulp-vim_ruby_mri_exe = 'RUBYOPT="-Ke" ruby'
<
To override the args and the tail: >
    let g:gulp-vim_ruby_mri_args = "--my --args --here"
    let g:gulp-vim_ruby_mri_tail = "> /tmp/my-output-file-biatch"
<
The general form of the override options is: >
    gulp-vim_<filetype>_<subchecker>_<option-name>
<
For checkers that do not use the 'makeprgBuild()' function you will have to
look at the source code of the checker in question. If there are specific
options that can be set, these are usually documented in the wiki:

    https://github.com/scrooloose/gulp-vim/wiki/Syntax-Checkers

                             *'gulp-vim_<filetype>_<checker>_quiet_messages'*
In the same vein, 'g:gulp-vim_<filetype>_<checker-name>_quiet_messages' can
be used to restrict message filters to messages produced by specific checkers.
Example: >
    let g:gulp-vim_python_pylama_quiet_messages = { "type":  "style",
                                                   \ "regex": '\m\[C03\d\d\]' }
<
See |gulp-vim_quiet_messages| for the syntax.

==============================================================================
6. Notes                                                     *gulp-vim-notes*

------------------------------------------------------------------------------
6.1. Handling of composite filetypes                     *gulp-vim-composite*

Some Vim plugins use composite filetypes, such as 'django.python' or
'handlebars.html'. Normally, gulp-vim deals with this situation by splitting
the filetype in its simple components, and calling all checkers that apply.
If this behaviour is not desirable, you can disable it by mapping the
composite filetypes to a simple ones using |gulp-vim_filetype_map|, e.g.: >
    let g:gulp-vim_filetype_map = { 'handlebars.html': 'handlebars' }
<
------------------------------------------------------------------------------
6.2 Interaction with python-mode                            *gulp-vim-pymode*

gulp-vim can be used along with the 'python-mode' Vim plugin (see
https://github.com/klen/python-mode). However, they both run syntax checks by
default when you save buffers to disk, and this is probably not what you want.
To avoid both plugins opening error windows, you can either set passive mode
for python in gulp-vim (see |gulp-vim_mode_map|), or disable lint checks in
python-mode, by setting |pymode_lint_write| to 0. E.g.: >
    let g:pymode_lint_write = 0
<
------------------------------------------------------------------------------
6.3 Interaction with the fish shell                           *gulp-vim-fish*

At the time of this writing the 'fish' shell (see http://fishshell.com/)
doesn't support the standard UNIX syntax for file redirections, and thus it
can't be used together with gulp-vim. You don't need to change your login
shell to address this problem, but you do have to point Vim's 'shell' to a more
traditional shell, such as 'zsh', 'bash', 'ksh', or even the original Bourne
'sh': >
    set shell=bash
<
------------------------------------------------------------------------------
6.4. Using gulp-vim with the fizsh shell                    *gulp-vim-fizsh*

Using gulp-vim with the 'fizsh' shell (see https://github.com/zsh-users/fizsh)
is possible, but potentially problematic. In order to do it you'll need to set
'shellredir' like this: >
    set shellredir=>%s\ 2>&1
<
Please keep in mind however that Vim can't take advantage of any of the
interactive features of 'fizsh'. Using a more traditional shell such as 'zsh',
'bash', 'ksh', or the original Bourne 'sh' might be a better choice: >
    set shell=zsh
<
------------------------------------------------------------------------------
6.5. Interaction with Eclim                                  *gulp-vim-eclim*

As far as gulp-vim is concerned there shouldn't be any compatibility problems
with the 'Eclim' Vim plugin (see http://eclim.org/). However, at the time of
this writing there are several reports that 'Eclim' triggers a bug in Vim that
makes gulp-vim forget some of its configuration parameters. No solutions or
workarounds are known for now.

------------------------------------------------------------------------------
6.6. Interaction with vim-virtualenv                *gulp-vim-vim-virtualenv*

At the time of this writing, gulp-vim can't run checkers installed
in Python virtual environments activated by 'vim-virtualenv' (see
https://github.com/jmcantrell/vim-virtualenv).  This is a limitation of
'vim-virtualenv'.

==============================================================================
7. About                                                     *gulp-vim-about*

The core maintainers of gulp-vim are:
    Martin Grenfell (github: scrooloose)
    Gregor Uhlenheuer (github: kongo2002)
    LCD 047 (github: lcd047)

Find the latest version of gulp-vim at:

    http://github.com/scrooloose/gulp-vim

==============================================================================
8. License                                                 *gulp-vim-license*

gulp-vim is released under the wtfpl.
See http://sam.zoy.org/wtfpl/COPYING.

 vim:tw=78:sw=4:ft=help:norl:
